name: Test

on:
  push:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e-tests:
    name: React e2e tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}/android_ios/testing_apps/android
    strategy:
      fail-fast: true
      matrix:
        app: ["Getting started"]
    steps:
      - name: Setup NodeJS 19.x
        uses: actions/setup-node@v3
        with:
          node-version: 19.x
      - name: Checkout e2e repository
        uses: actions/checkout@v3
        with:
          repository: pubnub/chat-components-e2e-tests
          ref: master
          token: ${{ secrets.GH_TOKEN }}
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: android_ios/chat-components-android
      - name: Install e2e framework dependencies
        run: npm ci
      - name: Build ${{ matrix.app }} application
        run: echo "::notice title=Demo application::Using pre-build ${{ matrix.app }}. Please think about building it during test run."
      - name: Install and run Appium
        run: |
          npm install -g appium
          appium &
      - name: Update Java paths
        run: |
          echo "$JAVA_HOME_17_X64" >> $GITHUB_PATH
          echo "JAVA_HOME=$JAVA_HOME_17_X64" >> $GITHUB_ENV
      - name: Android paths
        run: |
          echo "Adb devices:"
          $ANDROID_HOME/platform-tools/adb devices
          echo "1 >> List AVDs:"
          $ANDROID_HOME/emulator/emulator -list-avds
          yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses
          echo "Creating avd"
          [[ $RUNNER_ARCH == X86 ]] && ARCH=x86 || ARCH=x86_64
          TARGET=google_apis
          API_LEVEL=30
          DEVICE="Pixel 2"
          AVD_IMAGE_NAME="$(echo "$DEVICE" | tr '[:upper:]' '[:lower:]' | tr ' ' '_')_API_$API_LEVEL"
          echo "COMMAND: echo no | $ANDROID_HOME/tools/bin/avdmanager --verbose create avd --force --name \"$AVD_IMAGE_NAME\" --abi \"$TARGET/$ARCH\" --package \"system-images;android-$SDK_VERSION;$TARGET;$ARCH\" --device \"$DEVICE\""
          echo no | $ANDROID_HOME/tools/bin/avdmanager --verbose create avd --force --name "$AVD_IMAGE_NAME" --abi "$TARGET/$ARCH" --package "system-images;android-$SDK_VERSION;$TARGET;$ARCH" --device "$DEVICE"
          echo "List avd:"
          $ANDROID_HOME/emulator/emulator -list-avds
          # Set screen dimensions
          echo "hw.lcd.density=420" >> ~/.android/avd/$AVD_IMAGE_NAME.avd/config.ini
          echo "hw.lcd.height=1920" >> ~/.android/avd/$AVD_IMAGE_NAME.avd/config.ini
          echo "hw.lcd.width=1080" >> ~/.android/avd/$AVD_IMAGE_NAME.avd/config.ini
          echo "Starting emulator and waiting for boot to complete..."
          nohup $ANDROID_HOME/emulator/emulator -avd $AVD_IMAGE_NAME -no-snapshot -no-window -no-audio -no-boot-anim -camera-back none -camera-front none -qemu -m 2048 > /dev/null 2>&1 &
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
          echo "Emulator has finished booting"
          $ANDROID_HOME/platform-tools/adb devices
      - name: List Android simulators
        run: adb devices
      - name: Run e2e tests for ${{ matrix.app }}
        run: |
          echo "JAVA_HOME: $JAVA_HOME"
          npm run androidlocal
