import java.util.regex.Pattern

/**
 * Local Release tasks
 *
 * These tasks are used for modifying properties - setting the release version and allowing to
 * release unsigned builds.
 *
 * Usage:
 * `./gradlew setVersion [-Pv=9.9.9-rc99]`
 * `./gradlew localRelease [-PskipTests]`
 *
 * Arguments:
 * -v           Version of the release
 * -skipTests   Ignore tests during the release. Not recommended.
 *
 * `createBackup` and `restoreBackup` tasks are created. They can be called manually when needed:
 * `./gradlew restoreBackup`
 */
def dependencyFile = "buildSrc/src/main/java/com/pubnub/components/buildsrc/Dependencies.kt"
def backupFiles = ["gradle.properties", dependencyFile]

task cleanBuild {
    group 'Release'
    description 'Clean and build'

    doFirst {
        println 'Clean & build'
    }
}

task createBackup {
    group 'Release'
    description 'Create backup of gradle files'

    doFirst {
        println 'Create backup'
        createBackupFiles(backupFiles)
    }
}

task restoreBackup {
    group 'Release'
    description 'Restore backup of gradle files'

    doLast {
        println 'Restore backup'
        restoreBackupFiles(backupFiles)
    }
}

task tests {
    group 'Release'
    description 'Run Unit & Android tests'

    doFirst {
        if (project.hasProperty("skipTests"))
            println 'Skipping tests'
        else
            println 'Running tests'
    }
}

task localPublish {
    group 'Release'
    description 'Publish package to local maven'

    doFirst {
        println 'Publishing package'
    }
}

task publishAllToMavenLocal {
    group 'Release'
    description 'Publish all packages to local maven'

    dependsOn 'framework:publishToMavenLocal'
    dependsOn 'database:publishToMavenLocal'
    dependsOn 'ui:publishToMavenLocal'
    dependsOn 'publishToMavenLocal'
}

task setVersion {
    group 'Release'
    description 'Modify gradle.properties, set new library version and publish to local maven'

    afterEvaluate {
        doFirst {
            if (project.hasProperty("v")) {
                def version = project.getProperty("v")

                releaseSigningEnabled("gradle.properties", false)
                releasePropertiesVersionName("gradle.properties", version)
                releaseVersionName(dependencyFile, version)
            } else {
                def error = "Missing version parameter. Please pass '-Pv' with expected release version."
                logger.error(error)
                throw new TaskExecutionException(it, new Exception(error))
            }
        }
    }
}

task localRelease {
    group 'Release'
    description 'Modify gradle.properties, set new library version and publish to local maven'
}

afterEvaluate {
    setVersion.configure {
        dependsOn createBackup
    }
    cleanBuild.configure {
        finalizedBy clean
        finalizedBy build
    }
    build.configure {
        mustRunAfter clean
    }
    localPublish.configure {
        dependsOn cleanBuild
        dependsOn tests

        finalizedBy publishAllToMavenLocal
        finalizedBy restoreBackup
    }
    publishAllToMavenLocal.configure {
        mustRunAfter tests
    }
    restoreBackup.configure {
        mustRunAfter publishAllToMavenLocal
    }
    tests.configure {
        if(!project.hasProperty('skipTests')) {
            finalizedBy 'framework:test'
            finalizedBy 'framework:connectedAndroidTest'
            finalizedBy 'database:test'
            finalizedBy 'database:connectedAndroidTest'
            finalizedBy 'ui:test'
            finalizedBy 'ui:connectedAndroidTest'
            finalizedBy 'test'
            finalizedBy 'connectedAndroidTest'
        }
    }
}

static def releaseSigningEnabled(propertiesFile, value) {
    println 'Setting RELEASE_SIGNING_ENABLED = ' + value + ' in \'' + propertiesFile + '\''
    def regex = Pattern.compile("RELEASE_SIGNING_ENABLED.*")
    def updatedContent = new File(propertiesFile).getText('UTF-8').replaceAll(regex, "") + ("RELEASE_SIGNING_ENABLED=" + value + "\n")
    new File(propertiesFile).write(updatedContent, 'UTF-8')
}

static def releasePropertiesVersionName(buildFile, value) {
    println 'Setting VERSION_NAME = ' + value + ' in \'' + buildFile + '\''
    def regex = "(.*?VERSION_NAME\\s*?=\\s*?)(\\d\\.\\d\\.\\d.*)"
    def newVersion = "\$1" + value
    def updatedContent = new File(buildFile).getText('UTF-8').replaceAll(regex, newVersion)
    new File(buildFile).write(updatedContent, 'UTF-8')
}

static def releaseVersionName(buildFile, value) {
    println 'Setting versionName = ' + value + ' in \'' + buildFile + '\''
    def regex = "(.*?versionName\\s*?=\\s*?)(\"\\d\\.\\d\\.\\d.*\")"
    def newVersion = "\$1\"" + value + "\""
    def updatedContent = new File(buildFile).getText('UTF-8').replaceAll(regex, newVersion)
    new File(buildFile).write(updatedContent, 'UTF-8')
}

static def createBackupFiles(files) {
    files.each { fileName ->
        println 'Create backup of \'' + fileName + '\''
        def src = new File(fileName)
        def dest = new File(fileName + ".backup")
        dest.write(src.text)
    }
}

static def restoreBackupFiles(files) {
    files.each { fileName ->
        def src = new File(fileName + ".backup")
        if (src.exists()) {
            def dest = new File(fileName)

            println 'Restore backup of \'' + fileName + '\''
            dest.write(src.text)
            src.delete()
        }
    }
}
